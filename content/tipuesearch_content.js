var tipuesearch = {"pages": [{'title': 'About', 'text': "Yen's Website \n Yen's Blog", 'tags': '', 'url': 'About.html'}, {'title': 'WWW', 'text': 'World Wide Web 全球資訊網', 'tags': '', 'url': 'WWW.html'}, {'title': 'cmsimde', 'text': 'https://github.com/chiamingyen/cmsimde \xa0', 'tags': '', 'url': 'cmsimde.html'}, {'title': 'FossilSCM', 'text': "https://fossil-scm.org/ \xa0是用於\xa0 https://www.sqlite.org/ \xa0的分散式版次管理系統. \n 如何使用 Fossil SCM \n 利用 fossil init project.fossil 建立一個新的 Fossil SCM 格式倉儲, project.fossil 為 SQLite 格式的資料庫檔案. \n 在 project.fossil 所在目錄, 建立一個 md 目錄, 然後進入 md 目錄後, 建立一個與倉儲同名的目錄, 在此目錄名稱為 project, 然後再進入 project 目錄, 利用 fossil open ./../../project.fossil 將此倉儲的內容打開, 若該倉儲為新建, 則 fossil open 之後, 在 Windows 操作系統中只會看到 __FOSSIL__ 檔案, 而這個檔案就如同 Git 倉儲中的 .git, 用來儲存倉儲改版的相關內容. \n 由於 project.fossil 為 SQLite 資料庫檔案格式, 因此使用 sqlite3 project.fossil 可以進入其 SQL 指令區, 使用\xa0select login, pw, info, cap from user;, 就可以查詢資料庫中有關 user 資料表的相關欄位. \n 使用 update user set pw='password' where login='your_account_name';, 就可以修改 your_account_name 的管理密碼. \n 與 Nginx 結合使用: \n worker_processes  1;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    sendfile        on;\n    keepalive_timeout  65;\n\n    server {\n        listen       80;\n        server_name  your_server_domain_name;\n\n        # Redirect all HTTP requests to HTTPS\n        return 301 https://$host$request_uri;\n    }\n\n    server {\n        listen       443 ssl;\n        server_name  your_server_domain_name;\n\n        ssl_certificate      C:/Certbot/live/your_server_domain_name/fullchain.pem;\n        ssl_certificate_key  C:/Certbot/live/your_server_domain_name/privkey.pem;\n\n        ssl_session_cache    shared:SSL:1m;\n        ssl_session_timeout  5m;\n\n        ssl_ciphers  HIGH:!aNULL:!MD5;\n        ssl_prefer_server_ciphers  on;\n\n        location / {\n            proxy_pass http://localhost:8080;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n} \n 啟動伺服器 \n fossil server c:\\repo --notfound\xa0project --localhost --https --port 8080 \n 表示有多個 .fossil 位於 c:\\repo 目錄中, 且以 project.fossil 作為 default 倉儲, 原始 fossil 伺服器以 localhost 在 port 8080 開啟, 設定 --https 表示要將所有的資料相關展示協定都直接採 https 模式連線, 如何透過 Nginx proxy 後, 只要將其他需要跨網站擷取的 URL 送到 Settings 中的 Default-csp 欄位中即可, 例如要能正確展示 cmsimde 的靜態網站, 就必須將\xa0 https://fonts.googleapis.com \xa0網站 URL 填入設定中的 Default-csp 欄位即可. \n 之後再配合  nssm.7z  將啟動伺服器的指令設為系統服務.", 'tags': '', 'url': 'FossilSCM.html'}, {'title': 'Programming', 'text': 'https://www.python.org/ \xa0', 'tags': '', 'url': 'Programming.html'}, {'title': 'LeoEditor', 'text': 'https://leo-editor.github.io/ \xa0', 'tags': '', 'url': 'LeoEditor.html'}, {'title': 'Brython', 'text': 'https://brython.info/ \xa0 \n 從 1 累加到 100: \n 1 add to 100 ROC Flag PROC flag USA Flag GD in Brython \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}, {'title': 'Simulation', 'text': 'https://github.com/topics/simulation \xa0', 'tags': '', 'url': 'Simulation.html'}, {'title': 'Solvespace', 'text': 'https://solvespace.com \xa0 \n solvespace_win.7z', 'tags': '', 'url': 'Solvespace.html'}, {'title': 'Webots', 'text': 'https://cyberbotics.com/ \xa0', 'tags': '', 'url': 'Webots.html'}, {'title': '3DPrinter', 'text': 'DIY 3D printer \n https://github.com/RoyBerntsenDesign/Project-Valkyrie \xa0 \n https://github.com/topics/3d-printer \xa0', 'tags': '', 'url': '3DPrinter.html'}]};